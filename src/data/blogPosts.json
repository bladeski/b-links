[{"title":"This is a test","description":"Test draft","post":"## This is to test the ability to save a draft!\nDRAFT DRAFT DRAFT\n\nUpdated now\n\nUpdated again\n\nAnd again and again and again","categories":[""],"_id":"1685718074237721","createdAt":"2023-06-14T13:34:19.752Z","updatedAt":"2023-06-14T13:34:28.317Z","name":"This-is-a-test","markup":"<h2 id=\"this-is-to-test-the-ability-to-save-a-draft\">This is to test the ability to save a draft!</h2>\n<p>DRAFT DRAFT DRAFT</p>\n<p>Updated now</p>\n<p>Updated again</p>\n<p>And again and again and again</p>\n","draft":true},{"title":"Building b-links","description":"Behind the scenes","post":"## Home Baking a Static Site\nWhilst I could have used any number of static site generators to build b-links ([11ty](https://www.11ty.dev), [Gatsby](https://www.gatsbyjs.com/) and [Jekyll](https://jekyllrb.com/) were all considered), I decided to home bake something with a selection of tools that I was either more familiar with or wanted to learn. In fact, initially I hadn't even planned for it to be a static site, but some kind of SPA with a few static pages that depended on an API for content.\n\nAfter deciding early on that I wanted to use [Pug](https://pugjs.org/) for my templates, [Sass]() as my CSS pre-processor, and keep JS _very_ light (i.e. framework-less), I really just had to decide how to pull the pieces together. It was here that I discovered [Parcel](https://parceljs.org/), and immediately fell in love with it. With a really small amount of effort - mostly consisting of adding it with [Yarn](https://yarnpkg.com/) and pointing my build script at the right place - I had something building that showed real promise, and has laid the foundations for where I am today.\n\nSkip forward several months and I feel that I now have a fairly solid build process for b-links, consisting of a few [Node.js](https://nodejs.org) tasks to clean out directories and the the following:\n* `start` - a Parcel task that builds and serves the main site from a `dist-serve` directory (after clearing it out first), and hot-reloads it as I make changes.\n* `start:management` - a Parcel task that serves the management component of b-links, which lets me add and edit content in the browser, rather than in code.\n* `start:api` - a Parcel task that starts an [Express-based]() API - used for adding and editing content (like this post). On adding either a post or link, or editing a blog post, the API takes a JSON model representing the content from the Management page, updates a JSON file containing all of the content<sup id=\"fnref:1\">[1](#fn:1)</sup> and runs a build task that updates and creates the relevant pages within the code base.\n* `build` - a Parcel task that cleans the dist directory and then builds first all content from the JSON data files and then moves on to generating the rest of the site, minifying the code as it goes. All in all this <25 second process creates a site that (as of today) is less that 400KB, and that includes 4 font files to support dyslexic users.\n* `test` - A [Jest](https://jestjs.io/) test task, that runs all of my unit tests - this is run in my CI pipeline before any kind of deployment.\n\nSo there you have it, a whistle-stop (very high-level) tour of how the b-links site is built! Feel free to jump into the [code](https://github.com/bladeski/b-links) and try it out for yourself.\n\n**Notes**\n<ol>\n<li id=\"fn:1\">\nThe JSON files containing content - one for blog posts and another for links - are currently stored in code, rather than a db, meaning that a full code deployment is required for every change of content, but that is a small overhead considering the size of the 'experiment' that is b-links. <a href=\"#fnref:1\" aria-label=\"Back to content.\">&#8593</a></li>\n</ol>\n","categories":["Node,","code,","Jest,","Parcel,","Pug,","Sass"],"draft":false,"_id":"1686313397105307","createdAt":"2023-06-09T12:23:17.105Z","updatedAt":"2023-06-09T15:00:45.854Z","name":"Building-b-links","markup":"<h2 id=\"home-baking-a-static-site\">Home Baking a Static Site</h2>\n<p>Whilst I could have used any number of static site generators to build b-links (<a href=\"https://www.11ty.dev\">11ty</a>, <a href=\"https://www.gatsbyjs.com/\">Gatsby</a> and <a href=\"https://jekyllrb.com/\">Jekyll</a> were all considered), I decided to home bake something with a selection of tools that I was either more familiar with or wanted to learn. In fact, initially I hadn't even planned for it to be a static site, but some kind of SPA with a few static pages that depended on an API for content.</p>\n<p>After deciding early on that I wanted to use <a href=\"https://pugjs.org/\">Pug</a> for my templates, <a href=\"\">Sass</a> as my CSS pre-processor, and keep JS <em>very</em> light (i.e. framework-less), I really just had to decide how to pull the pieces together. It was here that I discovered <a href=\"https://parceljs.org/\">Parcel</a>, and immediately fell in love with it. With a really small amount of effort - mostly consisting of adding it with <a href=\"https://yarnpkg.com/\">Yarn</a> and pointing my build script at the right place - I had something building that showed real promise, and has laid the foundations for where I am today.</p>\n<p>Skip forward several months and I feel that I now have a fairly solid build process for b-links, consisting of a few <a href=\"https://nodejs.org\">Node.js</a> tasks to clean out directories and the the following:</p>\n<ul>\n<li><code>start</code> - a Parcel task that builds and serves the main site from a <code>dist-serve</code> directory (after clearing it out first), and hot-reloads it as I make changes.</li>\n<li><code>start:management</code> - a Parcel task that serves the management component of b-links, which lets me add and edit content in the browser, rather than in code.</li>\n<li><code>start:api</code> - a Parcel task that starts an <a href=\"\">Express-based</a> API - used for adding and editing content (like this post). On adding either a post or link, or editing a blog post, the API takes a JSON model representing the content from the Management page, updates a JSON file containing all of the content<sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup> and runs a build task that updates and creates the relevant pages within the code base.</li>\n<li><code>build</code> - a Parcel task that cleans the dist directory and then builds first all content from the JSON data files and then moves on to generating the rest of the site, minifying the code as it goes. All in all this &lt;25 second process creates a site that (as of today) is less that 400KB, and that includes 4 font files to support dyslexic users.</li>\n<li><code>test</code> - A <a href=\"https://jestjs.io/\">Jest</a> test task, that runs all of my unit tests - this is run in my CI pipeline before any kind of deployment.</li>\n</ul>\n<p>So there you have it, a whistle-stop (very high-level) tour of how the b-links site is built! Feel free to jump into the <a href=\"https://github.com/bladeski/b-links\">code</a> and try it out for yourself.</p>\n<p><strong>Notes</strong></p>\n<ol>\n<li id=\"fn:1\">\nThe JSON files containing content - one for blog posts and another for links - are currently stored in code, rather than a db, meaning that a full code deployment is required for every change of content, but that is a small overhead considering the size of the 'experiment' that is b-links. <a aria-label=\"Back to content.\" href=\"#fnref:1\">â†‘</a></li>\n</ol>\n"},{"title":"My b-links Journey (part 2)","description":"Visual updates...","post":"## Being too clever for my own good!\nSo after having not updated b-links for a while (I have a tendency to go 'gung-ho' at things and then get distracted by other projects...) I recently returned to it to decide I wanted to give it a bit of a face lift. I also found some fundamental flaws in my original design whereby I was trying to split up my styles into far too many style sheets to be manageable. So I went back to basics.\n\nAs I was changing the layout quite considerably, I decided to simply strip things back and simplify at the same time, merging all my styles into the same CSS file and providing fallbacks for older browsers. The obvious downside of this is that the size of the CSS has increased considerably, from 6KB to a whopping 19KB! That being said, there is a lot of scope for optimising this - I just need to get around to it - maybe in 6 months time when I decide to look at it again!\n\n","categories":[""],"_id":"1683898784646665","createdAt":"2023-05-12T13:39:44.646Z","updatedAt":"2023-05-12T13:56:01.753Z","name":"My-b-links-Journey-part-2","markup":"<h2 id=\"being-too-clever-for-my-own-good\">Being too clever for my own good!</h2>\n<p>So after having not updated b-links for a while (I have a tendency to go 'gung-ho' at things and then get distracted by other projects...) I recently returned to it to decide I wanted to give it a bit of a face lift. I also found some fundamental flaws in my original design whereby I was trying to split up my styles into far too many style sheets to be manageable. So I went back to basics.</p>\n<p>As I was changing the layout quite considerably, I decided to simply strip things back and simplify at the same time, merging all my styles into the same CSS file and providing fallbacks for older browsers. The obvious downside of this is that the size of the CSS has increased considerably, from 6KB to a whopping 19KB! That being said, there is a lot of scope for optimising this - I just need to get around to it - maybe in 6 months time when I decide to look at it again!</p>\n"},{"title":"My b-links Journey (part 1)","description":"The journey so far!","post":"<h2 id=\"from-the-top\">From the Top...</h2>\n<p>B-links started very much as a concept for a highly accessible, performant site, which would serve as a library of useful links - for myself as much as anyone - and a blog... a small outlet for my thoughts.</p>\n<p>It has been an interesting journey so far, building both a minimalist front-end and an API simultaneously, as well as a management portal to let me easily add blog posts and links, but I've really enjoyed it, from the first sketches that I scribbled on a piece of my son's drawing paper, to getting a semi-working page deploying out to GitHub Pages.</p>\n<p>I guess a lot of it has been pulling together a number of my various skill-sets, from UI and UX design, to front-end development and also configuring of build pipelines and deployments. But there has been a lot I've learned along the way - designing and deploying a MongoDB database, and using Azure functions to serve as an API have been just a couple of areas that I've never touched on previously.</p>\n<p>After scribbling that first design, which was mostly some high level doodles with some annotations and more questions than answers, I've slowly built up a picture of what 'this' should be, and started to work on it, iterating as I go. I've recently heard Mike McQuaid from GitHub talk about his <a href=\"https://mikemcquaid.com/the-best-project/\">best project ever</a> and one of the big takeaways from that was to:</p>\n<blockquote>\n<p>'...fail faster and improve faster.'</p>\n</blockquote>\n<p>This has been one of the most important parts of developing b-links... trying to iterate regularly, constantly reviewing what I've done to see what works and what doesn't, and I think has been one of the great successes of the whole project!</p>\n","categories":["b-links","UX","Accessibility"],"_id":"1683799180556508","createdAt":"2022-10-27T09:59:40.556Z","updatedAt":"2023-05-11T15:13:56.130Z","name":"My-b-links-Journey-part-1","markup":"<h2 id=\"from-the-top\">From the Top...</h2>\n<p>B-links started very much as a concept for a highly accessible, performant site, which would serve as a library of useful links - for myself as much as anyone - and a blog... a small outlet for my thoughts.</p>\n<p>It has been an interesting journey so far, building both a minimalist front-end and an API simultaneously, as well as a management portal to let me easily add blog posts and links, but I've really enjoyed it, from the first sketches that I scribbled on a piece of my son's drawing paper, to getting a semi-working page deploying out to GitHub Pages.</p>\n<p>I guess a lot of it has been pulling together a number of my various skill-sets, from UI and UX design, to front-end development and also configuring of build pipelines and deployments. But there has been a lot I've learned along the way - designing and deploying a MongoDB database, and using Azure functions to serve as an API have been just a couple of areas that I've never touched on previously.</p>\n<p>After scribbling that first design, which was mostly some high level doodles with some annotations and more questions than answers, I've slowly built up a picture of what 'this' should be, and started to work on it, iterating as I go. I've recently heard Mike McQuaid from GitHub talk about his <a href=\"https://mikemcquaid.com/the-best-project/\">best project ever</a> and one of the big takeaways from that was to:</p>\n<blockquote>\n<p>'...fail faster and improve faster.'</p>\n</blockquote>\n<p>This has been one of the most important parts of developing b-links... trying to iterate regularly, constantly reviewing what I've done to see what works and what doesn't, and I think has been one of the great successes of the whole project!</p>\n"}]